name: build-windows

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write  # necesario para crear releases

jobs:
  build-online:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Ensure data directory exists
        shell: pwsh
        run: |
          if (!(Test-Path "data")) {
            New-Item -ItemType Directory -Path "data" -Force
          }

      - name: Create config example if missing
        shell: pwsh
        run: |
          if (!(Test-Path "config.yaml.example")) {
            @"
# Archivo de Configuración de Ejemplo - Verificación de Correos OWA
# Copia este archivo a config.yaml y ajusta los valores según tus necesidades

# URL de la página de OWA (Outlook Web Access) de Madrid
page_url: https://correoweb.madrid.org/owa/#path=/mail

# Correos electrónicos de respaldo (se usan si no hay archivo Excel)
default_emails:
  - ASP164@MADRID.ORG
  - AGM564@MADRID.ORG
  - USUARIO3@MADRID.ORG

# Configuración del navegador web
browser:
  headless: false
  session_file: state.json

# Configuración del archivo Excel
excel:
  default_file: data/correos.xlsx
  start_row: 2
  email_column: 1

# Configuración del procesamiento
processing:
  batch_size: 10

# Selectores CSS para elementos de la interfaz OWA
selectors:
  new_message_btn: button[title="Escribir un mensaje nuevo (N)"]
  to_field_role: textbox
  to_field_name: Para
  popup: div._pe_Y[ispopup="1"]
  discard_btn: button[aria-label="Descartar"]

# Tiempos de espera en milisegundos
wait_times:
  after_new_message: 1000
  after_fill_to: 3000
  after_blur: 500
  popup_visible: 5000
  after_click_token: 2000
  popup_load_data: 5000
  after_close_popup: 1000
  before_discard: 2000
"@ | Out-File -FilePath "config.yaml.example" -Encoding UTF8
            Write-Host "config.yaml.example created"
          }

      - name: Create Excel template if missing
        shell: pwsh
        run: |
          if (!(Test-Path "data/correos_template.xlsx")) {
            python -c "
import openpyxl
from openpyxl import Workbook

# Create workbook
wb = Workbook()
ws = wb.active
ws.title = 'Contactos'

# Add headers
headers = ['Correo', 'Estado', 'Nombre', 'Email Personal', 'Teléfono', 'Dirección', 'Departamento', 'Compañía', 'Oficina', 'SIP', 'Fecha Procesamiento', 'Observaciones']
for col_idx, header in enumerate(headers, start=1):
    ws.cell(row=1, column=col_idx, value=header)

# Add sample data
sample_emails = ['ASP164@MADRID.ORG', 'AGM564@MADRID.ORG', 'USR789@MADRID.ORG']
for row_idx, email in enumerate(sample_emails, start=2):
    ws.cell(row=row_idx, column=1, value=email)
    ws.cell(row=row_idx, column=2, value='')

# Adjust column widths
for col in range(1, len(headers) + 1):
    from openpyxl.utils import get_column_letter
    column_letter = get_column_letter(col)
    ws.column_dimensions[column_letter].width = 20

wb.save('data/correos_template.xlsx')
print('Excel template created successfully')
"
          }

      - name: Verify required files exist
        shell: pwsh
        run: |
          Write-Host "Checking required files..."

          if (!(Test-Path "config.yaml.example")) {
            Write-Error "config.yaml.example not found"
            exit 1
          }

          if (!(Test-Path "data/correos_template.xlsx")) {
            Write-Error "data/correos_template.xlsx not found"
            exit 1
          }

          if (!(Test-Path "src/verificacion_correo/__main__.py")) {
            Write-Error "Main entry point not found"
            exit 1
          }

          Write-Host "All required files found"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~\AppData\Local\ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Cache PyInstaller build
        uses: actions/cache@v4
        with:
          path: |
            build
            *.spec
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('**/*.py', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller
          # Ensure openpyxl is available for template creation
          pip install openpyxl

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Cache miss - Instalando navegadores Playwright..."
          playwright install chromium

      - name: Clean previous builds
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }

      - name: Build (onefile)
        shell: pwsh
        run: |
          pyinstaller --onefile `
            --collect-all playwright `
            --collect-all openpyxl `
            --collect-all yaml `
            --add-data "config.yaml.example;." `
            --add-data "data/correos_template.xlsx;data" `
            --hidden-import tkinter `
            --hidden-import tkinter.ttk `
            --hidden-import tkinter.scrolledtext `
            --hidden-import tkinter.filedialog `
            --hidden-import tkinter.messagebox `
            --hidden-import verificacion_correo.core.config `
            --hidden-import verificacion_correo.core.excel `
            --hidden-import verificacion_correo.core.browser `
            --hidden-import verificacion_correo.core.session `
            --hidden-import verificacion_correo.core.extractor `
            --hidden-import verificacion_correo.gui.main `
            --hidden-import verificacion_correo.cli.main `
            --hidden-import verificacion_correo.utils.logging `
            --exclude-module matplotlib `
            --exclude-module scipy `
            --exclude-module pytest `
            --exclude-module IPython `
            --exclude-module jupyter `
            --exclude-module pandas `
            --exclude-module numpy `
            --exclude-module PIL `
            --exclude-module cv2 `
            src/verificacion_correo/__main__.py

      - name: Test executable
        shell: pwsh
        run: |
          if (!(Test-Path dist/app.exe)) {
            Write-Error "El ejecutable no se creó correctamente"
            exit 1
          }
          $size = (Get-Item dist/app.exe).Length / 1MB
          Write-Host "Tamaño del ejecutable: $($size) MB"
          if ($size -lt 50) {
            Write-Warning "El ejecutable parece muy pequeño ($($size) MB). Puede que falten dependencias."
          }

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: app-win
          path: dist/app.exe
          if-no-files-found: error
          retention-days: 14

      - name: Rename binary with tag
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: Copy-Item dist/app.exe "dist/VerificacionCorreos-win-${{ github.ref_name }}.exe"

      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/VerificacionCorreos-win-${{ github.ref_name }}.exe
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}